{
  // relative paths to the directory to search for components.
    "dirs": ["src/components"],
  // valid file extensions for components.
    "extensions": ["vue"],
  // Glob patterns to match file names to be detected as components.
  // When specified, the `dirs`, `extensions`, and `directoryAsNamespace` options will be ignored.
  // If you want to exclude components being registered, use negative globs with leading `!`.
    "globs": ["src/components/*.{vue}"],
  
    // search for subdirectories
    "deep": true,
  
    // resolvers for custom components
    "resolvers": [],
  
    // generate `components.d.ts` global declarations,
    // also accepts a path for custom filename
    // default: `true` if package typescript is installed
    "dts": false,
  
    // Allow subdirectories as namespace prefix for components.
    "directoryAsNamespace": false,
  
    // Collapse same prefixes (camel-sensitive) of folders and components
    // to prevent duplication inside namespaced component name.
    // works when `directoryAsNamespace: true`
    "collapseSamePrefixes": false,
  
    // Subdirectory paths for ignoring namespace prefixes.
    // works when `directoryAsNamespace: true`
    "globalNamespaces": [],
  
    // auto import for directives
    // default: `true` for Vue 3, `false` for Vue 2
    // Babel is needed to do the transformation for Vue 2, it's disabled by default for performance concerns.
    // To install Babel, run: `npm install -D @babel/parser`
    "directives": true,
  
    // Transform path before resolving
    "importPathTransform": v => v,
  
    // Allow for components to override other components with the same name
    "allowOverrides": false,
  
    // Filters for transforming targets (components to insert the auto import)
    // Note these are NOT about including/excluding components registered - use `globs` or `excludeNames` for that
    "include": [/\.vue$/, /\.vue\?vue/],
    "exclude": [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/, /[\\/]\.nuxt[\\/]/],
  
    // Filters for component names that will not be imported
    // Use for globally imported async components or other conflicts that the plugin cannot detect
    "excludeNames": [/^Async.+/],
  
    // Vue version of project. It will detect automatically if not specified.
    // Acceptable value: 2 | 2.7 | 3
    // "version": 2.7,
  
    // Only provide types of components in library (registered globally)
    "types": []
  }

// Note: JSON does not natively support comments. However, you can use a JSON5 parser or preprocess the JSON file to strip out comments before parsing it in your application.